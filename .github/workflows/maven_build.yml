# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # Checkout code from GitHub
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Java 17 and cache Maven dependencies
      - name: Set up JDK 17 for x64
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          architecture: x64
          cache: maven

      # Build the project with Maven
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify

      # Create a directory for staging the artifacts
      - name: Create directory for staging
        run: mkdir staging

      # Copy the JAR file to the staging directory
      - name: Copy JAR file to staging
        run: cp target/*.jar staging

      # Upload the artifacts to GitHub as an artifact
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openai-connector
          path: staging

  docker:

    runs-on: ubuntu-latest

    needs: build

    steps:
      # Checkout code from GitHub
      - name: Checkout code
        uses: actions/checkout@v4
          
      # Set up Java 17 and cache Maven dependencies
      - name: Set up JDK 17 for x64
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          architecture: x64
          cache: maven

      # Build the project with Maven
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify

      # Generate Docker metadata
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5

      # Login to Docker Hub
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push the Docker imag
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name!= 'pull_request' }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ secrets.DOCKER_USERNAME }}/openai-connector-java:latest
          labels: ${{ steps.meta.outputs.labels }}
